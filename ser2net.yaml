%YAML 1.1
---
#
# This is a ser2net configuration file, showing examples of all
# sorts of things.  It's all commented out so it's safe to put
# in /etc/ser2net/ser2net.yaml.
#
# This is described in ser2net.yaml(5)

# YAML gives an error on empty files, just add something so the
# error doesn't happen.
define: &confver 1.0

# # Just a basic serial port  The con0 is the name of the connection,
# # each connection must be given a unique name.  The accepter is the
# # information about how to receive connections, in this case it is
# # on TCP port 2002.  The connector is what the connection is hooked
# # to when a connection comes in, in this case serial device /dev/ttyS0
# # with the given serial parameters.  local means to ignore modem
# # control lines, and is generally what you want.
# connection: &con00
#   accepter: tcp,2012
#   connector: serialdev,/dev/ttyS0,9600n81,local

# # Like the above, but with telnet and rfc2217 enabled.  With the
# # gensio library that ser2net uses, protocols stack, so this stacks
# # telnet on top of tcp.  It also shows how long complex lines can be broken
# # up, and that by-path serial ports are no problem in yaml.
# connection: &con01
#   accepter: telnet(rfc2217),tcp,2013
#   connector: serialdev,
#              /dev/serial/by-path/platform-3f980000.usb-usb-0:1.2:1.0-port0,
#              9600n81,local

# # Set all baud rates to 115200n81 by default.
# default:
#   name: speed
#   value: 115200n81

# # Enable CLOCAL by default
# default:
#   name: local
#   value: true
#   class: serialdev

# # Create a secure admin interface on sctp,2000
# admin:
#   accepter: certauth,ssl,sctp,2000

# # Define an arbitrary string substitution, we will use this later
# # for a banner.
# define: &banner1 This is a banner for port \N(\p)\r\n

# # Create an LED to flash the ACPI standby light on serial activity.
# led: &led1
#   driver: sysfs
#   options:
#     device: "tpacpi::standby"

# # This creates an arbitrary string we will use inside other strings.
# # The quotes are necessary to keep YAML from interpreting the colons.
# define: &serbase "/dev/serial/by-path/pci-0000:00:1d.0"
# define: &serUSB0 "*(serbase)-usb-0:1.8.2.4:1.0"

# # A connection on
# #  /dev/serial/by-path/pci-0000:00:1d.0-usb-0:1.8.2.4:1.0-port0
# # mapped to tcp port 2002 with telnet enabled.
# # Note that it is disabled at startup.  You can enable it through
# # the admin interface or by changing enable to "on" and sending a SIGHUP.
# # Note that even though this is disabled, you can still access it through
# # the rotator.
# connection: &con1
#   accepter: telnet(rfc2217),tcp,2002
#   timeout: 0
#   enable: off
#   connector: serialdev,*(serUSB0)-port0
#   options:
#     banner: *banner1
#     led-tx: *led1
#     led-rx: *led1

# # A connection on
# #  /dev/serial/by-path/pci-0000:00:1d.0-usb-0:1.8.2.4:1.0-port1
# # mapped to SCTP port 2003.  The baud rate is overridden from the
# # default we set before.  It also demonstrates how lines can be
# # continued.
# # You can access SCTP ports with the gensiot command, to connect
# # to this one do:
# #   gensiot telnet,sctp,<host>,2003
# connection: &con2
#   accepter: telnet(rfc2217),sctp,2003
#   timeout: 0
#   connector: serialdev,*(serUSB0)-port1,9600e71
#              local=false
#   options:
#     banner: *banner1

# #
# # An IPMI SOL connection.  See the OpenIPMI library for details on
# # how to configure this.
# # Note the use of *{} to insert a password from an external file.
# connection: &ipmicon1
#   accepter: telnet,tcp,3022
#   connector: ipmisol,lan -U admin -P *{pwfile} 192.168.27.37,115200

# # A rotator on TCP port 2020.  It will alternate between the
# # two previous connections.  The "dummy" gensio accepter is
# # useful in this case if you don't want independent access
# # to each connection.  This will only be bound to address
# # 192.168.27.3.
# rotator: &rot1
#   accepter: telnet,tcp,192.168.27.3,2020
#   connections: [
#     *con1,
#     *con2
#   ]

# # Now lets talk about secure connections.  At this stage in the state
# # of computers, all your connections should be at least encrypted, and
# # preferably authenticated.
# #
# # Note that the examples below use SCTP.  TCP can be subtituted.  They
# # also use the echo gensio, which is useful for testing.
# #
# # For encrypted connections to work, you need to use the ssl gensio
# # over other connections.  This requires a certificate and key, which
# # reside in /etc/ser2net/ser2net.crt and /etc/ser2net/ser2net.key by
# # default.  You can, of course, change the defaults or override these
# # on the accepter line.  Make sure ser2net.key is not readable by
# # anyone but the user running ser2net, or anyone can see your private
# # key.  Distribute ser2net.crt to the users so they can authenticate
# # the server.  You can get your certificate from a certificate
# # authority for best practice.  Or you can create it yourself.
# #
# # To create your own keys, do:
# #
# #   gtlssh-keygen --keydir /etc/ser2net keygen ser2net-<server>
# #
# # which will install them in the right place. Then you need to move
# # the files named /etc/ser2net/ser2net-<server>.key|crt to
# # /etc/ser2net/ser2net.key|crt.  Copy ser2net.crt to the accessing
# # system.  Restart ser2net.  You can then connect with:
# #
# #   gensiot telnet,ssl(CA=ser2net.crt),sctp,2004
# #
# # Note that the "-<server>" at the end of the key is important because it
# # make the subject name of the certificate more unique.  You can really
# # put anything you want for what you provide to keygen, as long as you
# # rename it properly.  That will be the subject name of the certificate.
# connection: &con3
#   accepter: telnet,ssl,sctp,2004
#   connector: echo
#   options:
#     banner: *banner1

# # Authentication with SSL is not shown, but is described in
# # ser2net.yaml(5).  It's fairly inconvenient.

# # Now do an authenticated connection with certauth.  You need a host
# # key/certificate pair as in the ssl-only example above.  Then you
# # need to create /usr/share/ser2net/auth/<user>.  You can create a
# # file named "password" in that directory and put a password there.
# # Make sure it's only readable by ser2net!  Or you can create a
# # directory named /usr/share/ser2net/auth/<user>/allowed_certs,
# # put the user's gtlssh certificate there, and run
# #  gtlssh-keygen rehash /usr/share/ser2net/auth/<user>/allowed_certs
# # Then you can do:
# #  gtlssh --telnet -p 2005 <user>@<hostname>
# # and do a normal gtlssh authentication.  See gtlssh(1) for details.
# connection: &con4
#   accepter: telnet,certauth(enable-password),ssl,sctp,2005
#   connector: echo
#   options:
#     banner: *banner1

# # If you just want to have encryption and no authentication but you want
# # to use gtlssh for login, you set allow-authfail
# # on certauth, which will run the protocol but ignore any failures, and
# # then you can just log in.  It's easy enough to just handle the
# # certificate,though, so that's really preferred.
# connection: &con5
#   accepter: telnet,certauth(allow-authfail),sctp,2006
#   connector: echo
#   options:
#     openstr: hello
#     banner: *banner1
